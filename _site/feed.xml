<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-02-15T21:35:43+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">blank</title><subtitle>Dipesh is a software engineer based in Norway. He likes to talk about indie projects and collaborating with other people on interesting projects.
</subtitle><entry><title type="html">From NanoGPT Internals to a ChatGPT-Style Chatbot</title><link href="http://localhost:4000/blog/2025/understanding-llms/" rel="alternate" type="text/html" title="From NanoGPT Internals to a ChatGPT-Style Chatbot" /><published>2025-02-12T16:59:00+01:00</published><updated>2025-02-12T16:59:00+01:00</updated><id>http://localhost:4000/blog/2025/understanding-llms</id><content type="html" xml:base="http://localhost:4000/blog/2025/understanding-llms/"><![CDATA[<p>In this post, I share a concise overview of how NanoGPT works and how I extended it into building a ChatGPT-style chatbot. We’ll cover the key building blocks—Attention Mechanisms, Positional Embeddings, and the Training Loop—and then discuss the steps needed for fine-tuning a model into a chatbot using RLHF techniques.</p>

<hr />

<h2 id="table-of-contents"><strong>Table of Contents</strong></h2>

<ol>
  <li><a href="#why-nanogpt">Why NanoGPT?</a></li>
  <li><a href="#attention-mechanisms">Attention Mechanisms</a></li>
  <li><a href="#positional-embeddings">Positional Embeddings</a></li>
  <li><a href="#core-training-loop">Core Training Loop</a></li>
  <li><a href="#building-a-chatgpt-style-bot">Building a ChatGPT-Style Bot</a>
    <ul>
      <li><a href="#pretraining--starting-from-a-base-model">Pretraining / Starting from a Base Model</a></li>
      <li><a href="#supervised-fine-tuning-sft">Supervised Fine-Tuning (SFT)</a></li>
      <li><a href="#reward-model-training">Reward Model Training</a></li>
      <li><a href="#rlhf-ppo">RLHF (PPO)</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a></li>
</ol>

<hr />

<h2 id="why-nanogpt"><strong>Why NanoGPT?</strong></h2>

<p><a href="https://github.com/karpathy/nanoGPT">NanoGPT</a> is a simple implementation of a causal, decoder-only Transformer built by <a href="https://twitter.com/karpathy">Andrej Karpathy</a>. It provided a minimalist approach to learning how GPT-style models work. The implementation of a causal, decoder-only Transformer helped me focus on the fundamentals without getting lost in excessive complexity. There is also a <a href="https://karpathy.ai/zero-to-hero.html">video tutorial series</a> by Andrej Karpathy on building LLMs from scratch which I highly recommend.</p>

<p>Key advantages:</p>
<ul>
  <li><strong>Self-Attention Made Simple</strong>: A clear view into how tokens interact.</li>
  <li><strong>Straightforward Positional Embeddings</strong>: Easily grasp the concept of token order.</li>
  <li><strong>Basic Training Loop</strong>: Understand next-token prediction with cross-entropy loss.</li>
</ul>

<hr />

<h2 id="attention-mechanisms"><strong>Attention Mechanisms</strong></h2>

<h3 id="overview"><strong>Overview</strong></h3>

<p>The self-attention mechanism allows the model to weigh each token relative to every other token in a sequence. This is done by computing Query, Key, and Value vectors and then using their interactions to form attention scores.</p>

<p>Below is a simplified version of a self-attention layer:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">import</span> <span class="n">torch.nn.functional</span> <span class="k">as</span> <span class="n">F</span>

<span class="k">class</span> <span class="nc">SelfAttention</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">embed_dim</span><span class="p">,</span> <span class="n">num_heads</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">num_heads</span> <span class="o">=</span> <span class="n">num_heads</span>
        <span class="n">self</span><span class="p">.</span><span class="n">head_dim</span> <span class="o">=</span> <span class="n">embed_dim</span> <span class="o">//</span> <span class="n">num_heads</span>
        
        <span class="c1"># Linear layers for Q, K, V
</span>        <span class="n">self</span><span class="p">.</span><span class="n">query</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">embed_dim</span><span class="p">,</span> <span class="n">embed_dim</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">embed_dim</span><span class="p">,</span> <span class="n">embed_dim</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">embed_dim</span><span class="p">,</span> <span class="n">embed_dim</span><span class="p">)</span>
        
        <span class="c1"># Final projection
</span>        <span class="n">self</span><span class="p">.</span><span class="n">proj</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">embed_dim</span><span class="p">,</span> <span class="n">embed_dim</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">B</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">C</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">q</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">k</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">key</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">v</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">value</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        
        <span class="c1"># Reshape and compute attention scores
</span>        <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="nf">view</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">num_heads</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">head_dim</span><span class="p">).</span><span class="nf">permute</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
        <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="p">.</span><span class="nf">view</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">num_heads</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">head_dim</span><span class="p">).</span><span class="nf">permute</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
        <span class="n">v</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="nf">view</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">num_heads</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">head_dim</span><span class="p">).</span><span class="nf">permute</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
        <span class="n">att_scores</span> <span class="o">=</span> <span class="p">(</span><span class="n">q</span> <span class="o">@</span> <span class="n">k</span><span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">/</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">head_dim</span> <span class="o">**</span> <span class="mf">0.5</span><span class="p">)</span>
        
        <span class="n">mask</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">triu</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">ones</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">x</span><span class="p">.</span><span class="n">device</span><span class="p">),</span> <span class="n">diagonal</span><span class="o">=</span><span class="mi">1</span><span class="p">).</span><span class="nf">bool</span><span class="p">()</span>
        <span class="n">att_scores</span> <span class="o">=</span> <span class="n">att_scores</span><span class="p">.</span><span class="nf">masked_fill</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span> <span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">-inf</span><span class="sh">'</span><span class="p">))</span>
        
        <span class="n">att_weights</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="nf">softmax</span><span class="p">(</span><span class="n">att_scores</span><span class="p">,</span> <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">att_weights</span> <span class="o">@</span> <span class="n">v</span>
        
        <span class="n">out</span> <span class="o">=</span> <span class="n">out</span><span class="p">.</span><span class="nf">permute</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">).</span><span class="nf">contiguous</span><span class="p">().</span><span class="nf">view</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">C</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">proj</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="positional-embeddings"><strong>Positional Embeddings</strong></h2>

<h3 id="overview-1"><strong>Overview</strong></h3>

<p>Since Transformers don’t inherently process token order, positional embeddings provide each token with information about its position in the sequence. This fixed method—using sine and cosine functions—adds no extra parameters.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PositionalEncoding</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">embed_dim</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">1024</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">pe</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">max_length</span><span class="p">,</span> <span class="n">embed_dim</span><span class="p">)</span>
        <span class="n">position</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">max_length</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="p">.</span><span class="nb">float</span><span class="p">).</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">div_term</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">embed_dim</span><span class="p">,</span> <span class="mi">2</span><span class="p">).</span><span class="nf">float</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="o">-</span><span class="n">torch</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">(</span><span class="mf">10000.0</span><span class="p">))</span> <span class="o">/</span> <span class="n">embed_dim</span><span class="p">))</span>
        <span class="n">pe</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">::</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">position</span> <span class="o">*</span> <span class="n">div_term</span><span class="p">)</span>
        <span class="n">pe</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">::</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="n">position</span> <span class="o">*</span> <span class="n">div_term</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">register_buffer</span><span class="p">(</span><span class="sh">'</span><span class="s">pe</span><span class="sh">'</span><span class="p">,</span> <span class="n">pe</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">seq_len</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">pe</span><span class="p">[:,</span> <span class="p">:</span><span class="n">seq_len</span><span class="p">,</span> <span class="p">:]</span>
</code></pre></div></div>

<hr />

<h2 id="core-training-loop"><strong>Core Training Loop</strong></h2>

<p>The training loop for NanoGPT involves predicting the next token. Here is a condensed version:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">import</span> <span class="n">torch.optim</span> <span class="k">as</span> <span class="n">optim</span>

<span class="n">model</span> <span class="o">=</span> <span class="nc">GPTModel</span><span class="p">(...)</span>  <span class="c1"># Your GPT-like model
</span><span class="n">optimizer</span> <span class="o">=</span> <span class="n">optim</span><span class="p">.</span><span class="nc">AdamW</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">)</span>
<span class="n">loss_fn</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">CrossEntropyLoss</span><span class="p">()</span>

<span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">max_steps</span><span class="p">):</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="nf">get_batch</span><span class="p">(</span><span class="sh">'</span><span class="s">train</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">logits</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># (batch_size, seq_len, vocab_size)
</span>    <span class="n">loss</span> <span class="o">=</span> <span class="nf">loss_fn</span><span class="p">(</span><span class="n">logits</span><span class="p">.</span><span class="nf">view</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">logits</span><span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)),</span> <span class="n">y</span><span class="p">.</span><span class="nf">view</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
    <span class="n">optimizer</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>
    <span class="n">loss</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>
    <span class="n">optimizer</span><span class="p">.</span><span class="nf">step</span><span class="p">()</span>
    
    <span class="k">if</span> <span class="n">step</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Step </span><span class="si">{</span><span class="n">step</span><span class="si">}</span><span class="s">, train loss: </span><span class="si">{</span><span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>This loop emphasizes simplicity while laying the foundation for more complex training strategies.</p>

<hr />

<h2 id="building-a-chatgpt-style-bot"><strong>Building a ChatGPT-Style Bot</strong></h2>

<p>Since NanoGPT has already been trained as a base language model, the next step is aligning it for conversational tasks. This involves two key stages: <strong>Reward Model Training</strong> and <strong>RLHF (PPO)</strong>.</p>

<h3 id="reward-model-training">Reward Model Training</h3>

<p>To evaluate and rank generated responses, you can train a reward model. The reward model takes latent representations from the base GPT model and outputs a scalar reward that reflects response quality. Below is a simplified example using PyTorch:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>

<span class="k">class</span> <span class="nc">RewardModel</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">hidden_dim</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">linear</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">hidden_dim</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">hidden_states</span><span class="p">):</span>
        <span class="c1"># hidden_states: (batch, seq_len, hidden_dim)
</span>        <span class="c1"># Using mean pooling over the sequence for a simple summary
</span>        <span class="n">pooled</span> <span class="o">=</span> <span class="n">hidden_states</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>  
        <span class="n">reward</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">linear</span><span class="p">(</span><span class="n">pooled</span><span class="p">).</span><span class="nf">squeeze</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>  
        <span class="k">return</span> <span class="n">reward</span>

<span class="c1"># Example usage:
</span><span class="n">hidden_dim</span> <span class="o">=</span> <span class="mi">768</span>  <span class="c1"># Example hidden dimension
</span><span class="n">reward_model</span> <span class="o">=</span> <span class="nc">RewardModel</span><span class="p">(</span><span class="n">hidden_dim</span><span class="p">)</span>

<span class="c1"># Simulate some hidden representations (for example from a GPT model)
</span><span class="n">dummy_hidden</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="n">hidden_dim</span><span class="p">)</span>  <span class="c1"># (batch, seq_len, hidden_dim)
</span><span class="n">reward_scores</span> <span class="o">=</span> <span class="nf">reward_model</span><span class="p">(</span><span class="n">dummy_hidden</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Reward scores:</span><span class="sh">"</span><span class="p">,</span> <span class="n">reward_scores</span><span class="p">)</span>
</code></pre></div></div>

<p>This reward model can later be trained on human preference data to accurately score responses.</p>

<h3 id="rlhf-ppo-for-fine-tuning">RLHF (PPO) for Fine-Tuning</h3>

<p>With a trained reward model, you can further fine-tune your GPT model using reinforcement learning. One common approach is to use Proximal Policy Optimization (PPO) to adjust the model based on the reward signals. The TRL (Transformer Reinforcement Learning) library by HuggingFace simplifies these steps. Below is an example:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">trl</span> <span class="kn">import</span> <span class="n">PPOTrainer</span><span class="p">,</span> <span class="n">PPOConfig</span>
<span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForCausalLM</span><span class="p">,</span> <span class="n">AutoTokenizer</span>
<span class="kn">import</span> <span class="n">torch</span>

<span class="c1"># Load a GPT-like model and its tokenizer (using GPT-2 here for demonstration)
</span><span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForCausalLM</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="sh">"</span><span class="s">gpt2</span><span class="sh">"</span><span class="p">)</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="p">.</span><span class="nf">from_pretrained</span><span class="p">(</span><span class="sh">"</span><span class="s">gpt2</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Setup PPO configuration
</span><span class="n">ppo_config</span> <span class="o">=</span> <span class="nc">PPOConfig</span><span class="p">(</span>
    <span class="n">learning_rate</span><span class="o">=</span><span class="mf">1e-5</span><span class="p">,</span>
    <span class="n">batch_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">ppo_epochs</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
    <span class="n">init_kl_coef</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
    <span class="n">target</span><span class="o">=</span><span class="mf">6.0</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># Initialize the PPO trainer
</span><span class="n">ppo_trainer</span> <span class="o">=</span> <span class="nc">PPOTrainer</span><span class="p">(</span>
    <span class="n">config</span><span class="o">=</span><span class="n">ppo_config</span><span class="p">,</span>
    <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
    <span class="n">ref_model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>  <span class="c1"># using the same model as a reference
</span>    <span class="n">tokenizer</span><span class="o">=</span><span class="n">tokenizer</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># Sample prompt and generate a response
</span><span class="n">template</span> <span class="o">=</span> <span class="sh">"</span><span class="s">User: How can I improve my coding skills?</span><span class="se">\n</span><span class="s">Assistant:</span><span class="sh">"</span>
<span class="n">inputs</span> <span class="o">=</span> <span class="nf">tokenizer</span><span class="p">(</span><span class="n">template</span><span class="p">,</span> <span class="n">return_tensors</span><span class="o">=</span><span class="sh">"</span><span class="s">pt</span><span class="sh">"</span><span class="p">)</span>
<span class="n">response_ids</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span><span class="o">**</span><span class="n">inputs</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
<span class="n">response_text</span> <span class="o">=</span> <span class="n">tokenizer</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">response_ids</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">skip_special_tokens</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Generated response:</span><span class="sh">"</span><span class="p">,</span> <span class="n">response_text</span><span class="p">)</span>

<span class="c1"># Assume a reward score (in practice, this comes from your trained reward model)
</span><span class="n">reward</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">([</span><span class="mf">1.0</span><span class="p">])</span>  

<span class="c1"># Perform a PPO step
</span><span class="n">ppo_stats</span> <span class="o">=</span> <span class="n">ppo_trainer</span><span class="p">.</span><span class="nf">step</span><span class="p">(</span><span class="n">inputs</span><span class="p">[</span><span class="sh">"</span><span class="s">input_ids</span><span class="sh">"</span><span class="p">],</span> <span class="n">response_ids</span><span class="p">,</span> <span class="n">reward</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">PPO training stats:</span><span class="sh">"</span><span class="p">,</span> <span class="n">ppo_stats</span><span class="p">)</span>
</code></pre></div></div>

<p>These examples illustrate how to set up a reward model and integrate RLHF using PPO to further align your base model into a chatbot. This approach refines responses to be more coherent and contextually relevant without redoing the base training.</p>

<hr />]]></content><author><name></name></author><category term="LLM" /><summary type="html"><![CDATA[In this post, I share a concise overview of how NanoGPT works and how I extended it into building a ChatGPT-style chatbot. We’ll cover the key building blocks—Attention Mechanisms, Positional Embeddings, and the Training Loop—and then discuss the steps needed for fine-tuning a model into a chatbot using RLHF techniques.]]></summary></entry><entry><title type="html">My work setup in 2025</title><link href="http://localhost:4000/blog/2025/work-setup/" rel="alternate" type="text/html" title="My work setup in 2025" /><published>2025-01-01T16:59:00+01:00</published><updated>2025-01-01T16:59:00+01:00</updated><id>http://localhost:4000/blog/2025/work-setup</id><content type="html" xml:base="http://localhost:4000/blog/2025/work-setup/"><![CDATA[<table cellpadding="0" class="table table-sm">
<tr>
    <td>IDE</td>
    <td class="text-right">Cursor, VSCode</td>
</tr>
<tr>
    <td>Chat</td>
    <td class="text-right">ChatGPT, Claude, Perplexity</td>
</tr>
<tr>
    <td>Hosting</td>
    <td class="text-right">Contabo, Github Pages</td>
</tr>
<tr>
    <td>CDN / DNS / Domains</td>
    <td class="text-right">Cloudflare</td>
</tr>
<tr>
    <td>Note Taking / Writing</td>
    <td class="text-right">Obsidian</td>
</tr>
<tr>
    <td>Podcasts/Music</td>
    <td class="text-right">Spotify</td>
</tr>
<tr>
    <td>Dev Devices</td>
    <td class="text-right">MacBook Air M3 16GB</td>
</tr>
<tr>
    <td>External Screen</td>
    <td class="text-right">Philips 40b1u5601h</td>
</tr>
</table>]]></content><author><name></name></author><summary type="html"><![CDATA[My work setup these days]]></summary></entry><entry><title type="html">Vehicle Route Optimization with Fuel Constraints</title><link href="http://localhost:4000/blog/2024/vehicle-route-optimization/" rel="alternate" type="text/html" title="Vehicle Route Optimization with Fuel Constraints" /><published>2024-09-12T17:59:00+02:00</published><updated>2024-09-12T17:59:00+02:00</updated><id>http://localhost:4000/blog/2024/vehicle-route-optimization</id><content type="html" xml:base="http://localhost:4000/blog/2024/vehicle-route-optimization/"><![CDATA[<p>In this post, we examine the strategies that delivery companies use to optimize their routes by integrating fuel constraints. This post provides a professional guide to developing an optimal routing strategy for vehicles navigating the United States, balancing fuel efficiency and cost effectiveness.</p>

<h3 id="problem-definition">Problem Definition</h3>

<p>To address this challenge, our solution must satisfy the following requirements:
• A vehicle must be capable of traveling up to 1000 miles on a single tank of fuel.
• There is access to approximately 6000 fuel stations with known geographic coordinates and fuel prices.
• The objective is to minimize the overall fuel expenditure.</p>

<p>Here’s a visual representation of our problem:</p>

<div class="mermaid">
graph LR
    A[Start Location] --&gt; B[Route Planning]
    B --&gt; C[Find Nearby Stations]
    C --&gt; D[Calculate Costs]
    D --&gt; E[Choose Next Stop]
    E --&gt; F[Destination Reached?]
    F --&gt;|No| C
    F --&gt;|Yes| G[End Location]
    
    style A fill:#f96,stroke:#333,stroke-width:2px
    style G fill:#f96,stroke:#333,stroke-width:2px
    style B fill:#9cf,stroke:#333,stroke-width:2px
    style C fill:#9f9,stroke:#333,stroke-width:2px
    style D fill:#f9f,stroke:#333,stroke-width:2px
    style E fill:#ff9,stroke:#333,stroke-width:2px
    style F fill:#fcc,stroke:#333,stroke-width:2px
</div>

<h3 id="proposed-approach">Proposed Approach</h3>

<p>Our solution comprises three core components:</p>
<ol>
  <li>Location Services – Integrating the Google Maps API to accurately convert addresses into geographic coordinates.</li>
  <li>Data Storage – Utilizing PostGIS for efficient storage and querying of fuel station data.</li>
  <li>Route Optimization – Employing a greedy algorithm to determine the optimal route while considering fuel constraints and cost minimization.</li>
</ol>

<h3 id="1-location-services">1. Location Services</h3>

<p>We begin by integrating the Google Maps API for precise geocoding and route planning. The service converts addresses into coordinates and retrieves route information as demonstrated below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">googlemaps</span> <span class="kn">import</span> <span class="n">Client</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Tuple</span>

<span class="k">class</span> <span class="nc">LocationService</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">gmaps</span> <span class="o">=</span> <span class="nc">Client</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">api_key</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">geocode</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">address</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="nb">float</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">Convert address to coordinates</span><span class="sh">"""</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">gmaps</span><span class="p">.</span><span class="nf">geocode</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">result</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Could not geocode address: </span><span class="si">{</span><span class="n">address</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="n">location</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">geometry</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">location</span><span class="sh">'</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">location</span><span class="p">[</span><span class="sh">'</span><span class="s">lat</span><span class="sh">'</span><span class="p">],</span> <span class="n">location</span><span class="p">[</span><span class="sh">'</span><span class="s">lng</span><span class="sh">'</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">get_route</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">origin</span><span class="p">:</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="nb">float</span><span class="p">],</span> 
                 <span class="n">destination</span><span class="p">:</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Get route points between two locations</span><span class="sh">"""</span>
        <span class="n">route</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">gmaps</span><span class="p">.</span><span class="nf">directions</span><span class="p">(</span>
            <span class="n">origin</span><span class="p">,</span>
            <span class="n">destination</span><span class="p">,</span>
            <span class="n">mode</span><span class="o">=</span><span class="sh">"</span><span class="s">driving</span><span class="sh">"</span>
        <span class="p">)</span>
        
        <span class="k">if</span> <span class="ow">not</span> <span class="n">route</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">No route found</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="c1"># Extract route points
</span>        <span class="n">points</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="n">route</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">legs</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">steps</span><span class="sh">'</span><span class="p">]:</span>
            <span class="n">points</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span>
                <span class="n">step</span><span class="p">[</span><span class="sh">'</span><span class="s">start_location</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">lat</span><span class="sh">'</span><span class="p">],</span>
                <span class="n">step</span><span class="p">[</span><span class="sh">'</span><span class="s">start_location</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">lng</span><span class="sh">'</span><span class="p">]</span>
            <span class="p">))</span>
        
        <span class="c1"># Add destination
</span>        <span class="n">points</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span>
            <span class="n">route</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">legs</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">end_location</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">lat</span><span class="sh">'</span><span class="p">],</span>
            <span class="n">route</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">legs</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">end_location</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">lng</span><span class="sh">'</span><span class="p">]</span>
        <span class="p">))</span>
        
        <span class="k">return</span> <span class="n">points</span>
</code></pre></div></div>

<h3 id="2-data-storage">2. Data Storage</h3>

<p>We’ll use PostGIS to efficiently store and query fuel stations. Here’s our Django model:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.gis.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="n">django.contrib.gis.geos</span> <span class="kn">import</span> <span class="n">Point</span>

<span class="k">class</span> <span class="nc">FuelStation</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">location</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">PointField</span><span class="p">(</span><span class="n">srid</span><span class="o">=</span><span class="mi">4326</span><span class="p">)</span>  <span class="c1"># SRID for GPS coordinates
</span>    <span class="n">address</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">city</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">state</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">retail_price</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">indexes</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">models</span><span class="p">.</span><span class="nc">Index</span><span class="p">(</span><span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">retail_price</span><span class="sh">'</span><span class="p">]),</span>
            <span class="c1"># PostGIS will automatically create spatial index
</span>        <span class="p">]</span>
</code></pre></div></div>

<h3 id="3-route-optimization">3. Route Optimization</h3>

<p>Now for the core logic. We’ll use a greedy algorithm that:</p>
<ol>
  <li>Follows the route points</li>
  <li>Checks fuel level at each point</li>
  <li>Finds the cheapest reachable station when needed
If the vehicle can reach the destination without refueling, it will do so. Otherwise, it will find the cheapest reachable station.</li>
</ol>

<p>Here’s the main optimizer class, broken down into manageable pieces:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.gis.db.models.functions</span> <span class="kn">import</span> <span class="n">Distance</span>
<span class="kn">from</span> <span class="n">django.contrib.gis.measure</span> <span class="kn">import</span> <span class="n">D</span>
<span class="kn">import</span> <span class="n">math</span>
<span class="kn">import</span> <span class="n">logging</span>

<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">GreedyRouteOptimizer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">max_range_miles</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">mpg</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">max_range_miles</span> <span class="o">=</span> <span class="n">max_range_miles</span>
        <span class="n">self</span><span class="p">.</span><span class="n">mpg</span> <span class="o">=</span> <span class="n">mpg</span>
        <span class="n">self</span><span class="p">.</span><span class="n">max_tank_gallons</span> <span class="o">=</span> <span class="n">max_range_miles</span> <span class="o">/</span> <span class="n">mpg</span>
</code></pre></div></div>

<h4 id="distance-calculation">Distance Calculation</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calculate_distance</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">point1</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="nb">float</span><span class="p">],</span> 
                      <span class="n">point2</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Calculate haversine distance between two points</span><span class="sh">"""</span>
    <span class="n">lat1</span><span class="p">,</span> <span class="n">lon1</span> <span class="o">=</span> <span class="n">point1</span>
    <span class="n">lat2</span><span class="p">,</span> <span class="n">lon2</span> <span class="o">=</span> <span class="n">point2</span>
    <span class="n">R</span> <span class="o">=</span> <span class="mf">3958.8</span>  <span class="c1"># Earth radius in miles
</span>    
    <span class="n">dlat</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="nf">radians</span><span class="p">(</span><span class="n">lat2</span> <span class="o">-</span> <span class="n">lat1</span><span class="p">)</span>
    <span class="n">dlon</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="nf">radians</span><span class="p">(</span><span class="n">lon2</span> <span class="o">-</span> <span class="n">lon1</span><span class="p">)</span>
    
    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">dlat</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span>
         <span class="o">+</span> <span class="n">math</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="nf">radians</span><span class="p">(</span><span class="n">lat1</span><span class="p">))</span>
         <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="nf">radians</span><span class="p">(</span><span class="n">lat2</span><span class="p">))</span>
         <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">dlon</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
    
    <span class="n">c</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="nf">atan2</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">math</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">a</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">R</span> <span class="o">*</span> <span class="n">c</span>
</code></pre></div></div>

<h4 id="finding-optimal-fuel-stops">Finding Optimal Fuel Stops</h4>

<p>The core optimization logic:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_optimal_stops</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">route_points</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="nb">float</span><span class="p">]],</span> 
                      <span class="n">total_distance</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Find optimal fuel stops along the route</span><span class="sh">"""</span>
    <span class="n">current_fuel_range</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">max_range_miles</span>
    <span class="n">total_cost</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">stops</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">current_position</span> <span class="o">=</span> <span class="n">route_points</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">distance_remaining</span> <span class="o">=</span> <span class="n">total_distance</span>
    <span class="n">new_route</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="c1"># Short route optimization
</span>    <span class="k">if</span> <span class="n">total_distance</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">max_range_miles</span><span class="p">:</span>
        <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">Direct route possible - no fuel stops needed</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">route</span><span class="sh">'</span><span class="p">:</span> <span class="n">route_points</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">stops</span><span class="sh">'</span><span class="p">:</span> <span class="p">[],</span>
            <span class="sh">'</span><span class="s">total_cost</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.0</span>
        <span class="p">}</span>
    
    <span class="c1"># Process each route segment
</span>    <span class="k">for</span> <span class="n">next_point</span> <span class="ow">in</span> <span class="n">route_points</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
        <span class="n">segment_distance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">calculate_distance</span><span class="p">(</span>
            <span class="n">current_position</span><span class="p">,</span> <span class="n">next_point</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">segment_distance</span> <span class="o">&lt;=</span> <span class="n">current_fuel_range</span><span class="p">:</span>
            <span class="c1"># Can reach next point with current fuel
</span>            <span class="n">self</span><span class="p">.</span><span class="nf">_process_direct_segment</span><span class="p">(</span>
                <span class="n">current_position</span><span class="p">,</span> <span class="n">next_point</span><span class="p">,</span> 
                <span class="n">segment_distance</span><span class="p">,</span> <span class="n">new_route</span><span class="p">)</span>
            <span class="n">current_fuel_range</span> <span class="o">-=</span> <span class="n">segment_distance</span>
            <span class="n">current_position</span> <span class="o">=</span> <span class="n">next_point</span>
            
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Need to find a fuel stop
</span>            <span class="n">station</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_find_fuel_stop</span><span class="p">(</span>
                <span class="n">current_position</span><span class="p">,</span> <span class="n">current_fuel_range</span><span class="p">)</span>
            
            <span class="k">if</span> <span class="ow">not</span> <span class="n">station</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">Exception</span><span class="p">(</span><span class="sh">"</span><span class="s">No reachable fuel stations found</span><span class="sh">"</span><span class="p">)</span>
                
            <span class="n">stop_info</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_process_fuel_stop</span><span class="p">(</span>
                <span class="n">station</span><span class="p">,</span> <span class="n">current_position</span><span class="p">,</span> 
                <span class="n">current_fuel_range</span><span class="p">,</span> <span class="n">total_cost</span><span class="p">)</span>
                
            <span class="n">stops</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">stop_info</span><span class="p">[</span><span class="sh">'</span><span class="s">station</span><span class="sh">'</span><span class="p">])</span>
            <span class="n">total_cost</span> <span class="o">+=</span> <span class="n">stop_info</span><span class="p">[</span><span class="sh">'</span><span class="s">cost</span><span class="sh">'</span><span class="p">]</span>
            <span class="n">current_position</span> <span class="o">=</span> <span class="p">(</span><span class="n">station</span><span class="p">.</span><span class="n">location</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">station</span><span class="p">.</span><span class="n">location</span><span class="p">.</span><span class="n">x</span><span class="p">)</span>
            <span class="n">current_fuel_range</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">max_range_miles</span>
            <span class="n">new_route</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">stop_info</span><span class="p">[</span><span class="sh">'</span><span class="s">location</span><span class="sh">'</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">route</span><span class="sh">'</span><span class="p">:</span> <span class="n">new_route</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">stops</span><span class="sh">'</span><span class="p">:</span> <span class="n">stops</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">total_cost</span><span class="sh">'</span><span class="p">:</span> <span class="n">total_cost</span>
    <span class="p">}</span>
</code></pre></div></div>

<h4 id="finding-the-next-fuel-station">Finding the Next Fuel Station</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">_find_fuel_stop</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">current_point</span><span class="p">:</span> <span class="n">Point</span><span class="p">,</span> 
                    <span class="n">max_range</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">FuelStation</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Find the cheapest reachable fuel station</span><span class="sh">"""</span>
    <span class="n">nearby_stations</span> <span class="o">=</span> <span class="p">(</span><span class="n">FuelStation</span><span class="p">.</span><span class="n">objects</span>
        <span class="p">.</span><span class="nf">annotate</span><span class="p">(</span><span class="n">distance</span><span class="o">=</span><span class="nc">Distance</span><span class="p">(</span><span class="sh">'</span><span class="s">location</span><span class="sh">'</span><span class="p">,</span> <span class="n">current_point</span><span class="p">))</span>
        <span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">distance__lte</span><span class="o">=</span><span class="nc">D</span><span class="p">(</span><span class="n">mi</span><span class="o">=</span><span class="n">max_range</span><span class="p">))</span>
        <span class="p">.</span><span class="nf">order_by</span><span class="p">(</span><span class="sh">'</span><span class="s">retail_price</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">distance</span><span class="sh">'</span><span class="p">))</span>
    
    <span class="k">if</span> <span class="ow">not</span> <span class="n">nearby_stations</span><span class="p">.</span><span class="nf">exists</span><span class="p">():</span>
        <span class="k">return</span> <span class="bp">None</span>
        
    <span class="k">return</span> <span class="n">nearby_stations</span><span class="p">.</span><span class="nf">first</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="route-visualization">Route Visualization</h3>

<p>The diagram below illustrates a sample optimized route with designated fuel stops:</p>

<div class="mermaid">
graph LR
    A[Los Angeles] --&gt;|350mi| B[Station 1]
    B --&gt;|400mi| C[Station 2]
    C --&gt;|300mi| D[Station 3]
    D --&gt;|450mi| E[New York]
    
    style A fill:#f96,stroke:#333,stroke-width:2px
    style E fill:#f96,stroke:#333,stroke-width:2px
    style B fill:#9f9,stroke:#333,stroke-width:2px
    style C fill:#9f9,stroke:#333,stroke-width:2px
    style D fill:#9f9,stroke:#333,stroke-width:2px
</div>

<h3 id="usage-example">Usage Example</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Initialize services
</span><span class="n">location_service</span> <span class="o">=</span> <span class="nc">LocationService</span><span class="p">(</span><span class="n">GOOGLE_MAPS_API_KEY</span><span class="p">)</span>
<span class="n">optimizer</span> <span class="o">=</span> <span class="nc">GreedyRouteOptimizer</span><span class="p">()</span>

<span class="c1"># Get coordinates
</span><span class="n">start</span> <span class="o">=</span> <span class="n">location_service</span><span class="p">.</span><span class="nf">geocode</span><span class="p">(</span><span class="sh">"</span><span class="s">Los Angeles, CA</span><span class="sh">"</span><span class="p">)</span>
<span class="n">end</span> <span class="o">=</span> <span class="n">location_service</span><span class="p">.</span><span class="nf">geocode</span><span class="p">(</span><span class="sh">"</span><span class="s">New York, NY</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Get route points
</span><span class="n">route_points</span> <span class="o">=</span> <span class="n">location_service</span><span class="p">.</span><span class="nf">get_route</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>

<span class="c1"># Find optimal stops
</span><span class="n">result</span> <span class="o">=</span> <span class="n">optimizer</span><span class="p">.</span><span class="nf">find_optimal_stops</span><span class="p">(</span>
    <span class="n">route_points</span><span class="p">,</span>
    <span class="n">optimizer</span><span class="p">.</span><span class="nf">calculate_distance</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
<span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Total fuel cost: $</span><span class="si">{</span><span class="n">result</span><span class="p">[</span><span class="sh">'</span><span class="s">total_cost</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">stop</span> <span class="ow">in</span> <span class="n">result</span><span class="p">[</span><span class="sh">'</span><span class="s">stops</span><span class="sh">'</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Fuel stop: </span><span class="si">{</span><span class="n">stop</span><span class="p">.</span><span class="n">city</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">stop</span><span class="p">.</span><span class="n">state</span><span class="si">}</span><span class="s"> - $</span><span class="si">{</span><span class="n">stop</span><span class="p">.</span><span class="n">retail_price</span><span class="si">}</span><span class="s">/gal</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="performance-considerations">Performance Considerations</h3>

<p>Our implementation is designed with efficiency in mind: <br />
• <strong>Spatial Indexing</strong>: Leveraging PostGIS’s built-in spatial indexes for rapid data retrieval.<br />
• <strong>Distance Calculations</strong>: Utilizing the Haversine formula for fast and accurate distance approximations.<br />
• <strong>Greedy Approach</strong>: A pragmatic algorithm that, while not globally optimal, effectively addresses real-world constraints.</p>

<h3 id="future-improvements">Future Improvements</h3>

<p>Potential enhancements include:
• Integrating real-time fuel pricing data.
• Incorporating live traffic and road condition updates.
• Supporting simultaneous routing for multiple vehicles.
• Implementing time-window constraints for fuel station operations.</p>

<h3 id="conclusion">Conclusion</h3>

<p>In summary, this implementation offers a robust approach to optimizing vehicle routes under stringent fuel constraints. Although the current solution employs a greedy strategy, it establishes a solid foundation for further enhancements and real-world applications. The complete code is available on <a href="https://github.com/dipespandey/spotter-solution">GitHub</a>, and contributions are welcome to adapt and extend this solution for diverse operational needs.</p>

<hr />]]></content><author><name></name></author><category term="vehicle-routing" /><category term="optimization" /><category term="route-planning" /><summary type="html"><![CDATA[A practical guide to implementing a vehicle routing system with fuel constraints using Python and PostGIS]]></summary></entry><entry><title type="html">How I run everything in a cheap VPS</title><link href="http://localhost:4000/blog/2024/personal-server/" rel="alternate" type="text/html" title="How I run everything in a cheap VPS" /><published>2024-02-08T16:59:00+01:00</published><updated>2024-02-08T16:59:00+01:00</updated><id>http://localhost:4000/blog/2024/personal-server</id><content type="html" xml:base="http://localhost:4000/blog/2024/personal-server/"><![CDATA[<p>Apart from this blog which I host on <a href="https://pages.github.com/">GitHub Pages</a>, I also host a few other projects that have to run some server side logic. So, for this purpose, I have been using a $5/month VPS from <a href="https://contabo.com/">Contabo</a> for about a year now. While Contabo is not the best option out there(I have heard good things about <a href="https://www.hetzner.com/cloud/">Hetzner</a>), it has been a good enough option for me except for one time it went down for about a day when there was a spike in traffic. But for the price and the amount of traffic I get, it has been a good enough option for me.</p>

<p>This is how I run several projects on this VPS.</p>
<ol>
  <li>Django with gunicorn and nginx for all backend logic for all projects</li>
  <li>Celery for periodic jobs</li>
  <li>PostgreSQL for database</li>
  <li>Redis for caching and queuing</li>
  <li>Nginx for reverse proxy</li>
  <li>Certbot for SSL certificates</li>
  <li>Webshare for rotating proxy IP addresses</li>
  <li>Github Actions for CI/CD</li>
  <li>PM2 for managing multiple frontend instances</li>
  <li>Cloudflare for DNS and CDN</li>
</ol>

<p>Currently, the following projects are running on this VPS:</p>
<table class="table">
  <thead>
    <tr>
      <th>Project</th>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://nordstartup.com/">Nordstartup</a></td>
      <td>Django</td>
      <td>Remote job board for Nordic countries</td>
    </tr>
    <tr>
      <td><a href="https://childtales.xyz/">Childtales</a></td>
      <td>Nuxt.js</td>
      <td>Fairytale stories generation using AI for children</td>
    </tr>
    <tr>
      <td><a href="https://merostocks.com/">Merostocks</a></td>
      <td>Nuxt.js</td>
      <td>Nepalese stock market portfolio management</td>
    </tr>
    <tr>
      <td><a href="https://api.genalize.com/docs/">Genalize API</a></td>
      <td>Django</td>
      <td>API for Genalize</td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="vps" /><category term="contabo" /><summary type="html"><![CDATA[Using a $5 VPS to run my blog, and other few projects I work on]]></summary></entry><entry><title type="html">My go-to learning resources on the internet</title><link href="http://localhost:4000/blog/2024/best-online-resources/" rel="alternate" type="text/html" title="My go-to learning resources on the internet" /><published>2024-01-21T16:59:00+01:00</published><updated>2024-01-21T16:59:00+01:00</updated><id>http://localhost:4000/blog/2024/best-online-resources</id><content type="html" xml:base="http://localhost:4000/blog/2024/best-online-resources/"><![CDATA[<p>In the list below, I have tried to include some resources online that I find myself coming back to again and again. So, it serves like a bookmark for me.
They include topics from computer science, physics, philosophy, and life.</p>

<style>
html[data-theme='dark'] #searchInput {
    background-color: var(--global-card-bg-color);
    color: var(--global-text-color);
    border-color: var(--global-divider-color);
}
</style>

<!-- <input type="text" id="searchInput" onkeyup="searchTable()" placeholder="Search for resources, descriptions, categories..." style="width: 100%; padding: 12px 20px; margin: 8px 0; box-sizing: border-box; border: 2px solid #ccc; border-radius: 4px;"> -->

<script>
function searchTable() {
    var input, filter, table, tr, td, i, j, txtValue;
    input = document.getElementById("searchInput");
    filter = input.value.toLowerCase();
    table = document.querySelector("table");
    tr = table.getElementsByTagName("tr");

    for (i = 1; i < tr.length; i++) {
        tr[i].style.display = "none";
        td = tr[i].getElementsByTagName("td");
        for (j = 0; j < td.length; j++) {
            if (td[j]) {
                txtValue = td[j].textContent || td[j].innerText;
                if (txtValue.toLowerCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                    break;
                }
            }
        }
    }
}
</script>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Resource</th>
            <th>Description</th>
            <th>Category</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                <a href="https://github.com/remzi-arpacidusseau/ostep-projects/">Projects for an Operating Systems Class</a>
            </td>
            <td>
                Based on courses taught at the University of Wisconsin-Madison, 
                this repository contains a collection of projects that cover a wide range of topics in operating systems.
            </td>
            <td>
                Operating Systems
            </td>
        </tr>
        <tr>
            <td>
                <a href="https://aosabook.org/en/500L/introduction.html">500 lines or less</a>
            </td>
            <td>
                Focuses on the design decisions that programmers make in the small when they are building something new from scratch. 
            </td>
            <td>
                Programming
            </td>
        </tr>
        <tr>
            <td>
                <a href="https://karpathy.github.io/">Andrej Karpathy's Blog</a>
            </td>
            <td>
                A great resource for learning about machine learning and deep learning. His videos on <a href="https://www.youtube.com/@AndrejKarpathy/videos">youtube</a> are also great resources to help you build everything from scratch.
            </td>
            <td>
                Machine Learning
            </td>
        </tr>
        <tr>
            <td>
                <a href="https://news.ycombinator.com/">Hacker News</a>
            </td>
            <td>
                News and discussions about technology and startups.
            </td>
            <td>
                Technology
            </td>
        </tr>
        <tr>
            <td>
                <a href="https://paulgraham.com/articles.html">Paul Graham's Essays</a>
            </td>
            <td>
                Essays on technology, startups, life, and programming.
            </td>
            <td>
                Technology, Philosophy, Life
            </td>
        </tr>
        <tr>
            <td>
                <a href="https://writingexamples.com/">Writing Examples</a>
            </td>
            <td>
                Learn From the Best Writing of All Time
            </td>
            <td>
                Writing
            </td>
        </tr>
    </tbody>
</table>]]></content><author><name></name></author><category term="cs" /><category term="book" /><category term="project" /><category term="learning" /><summary type="html"><![CDATA[In the list below, I have tried to include some resources online that I find myself coming back to again and again. So, it serves like a bookmark for me. They include topics from computer science, physics, philosophy, and life.]]></summary></entry><entry><title type="html">Building a job board for personal use</title><link href="http://localhost:4000/blog/2022/building-a-job-board/" rel="alternate" type="text/html" title="Building a job board for personal use" /><published>2022-12-10T16:59:00+01:00</published><updated>2022-12-10T16:59:00+01:00</updated><id>http://localhost:4000/blog/2022/building-a-job-board</id><content type="html" xml:base="http://localhost:4000/blog/2022/building-a-job-board/"><![CDATA[<p>The purpose of this project is to build a remote job board that serves my needs. I am currently a software engineer at a company where I enjoy working but not long ago, I used to struggle finding remote job opportunities. I used to browse a few job boards in the past, but I found them to be quite limited in terms of the type of jobs they offer, especially how they treat remote jobs based on the location limitations like “only US based jobs” or “only jobs in Europe” or “visa required”. So, I am building this job board that makes the process of finding remote jobs easier.</p>

<h3 id="sources-as-of-now">Sources (as of now)</h3>
<ol>
  <li><a href="https://app.otta.com/">otta.com</a></li>
  <li><a href="https://jobs.80000hours.org/">80000hours</a></li>
  <li><a href="https://remote.com/jobs/">remote.com</a></li>
  <li><a href="https://weworkremotely.com/">weworkremotely.com</a></li>
  <li><a href="https://workingnomads.co/">workingnomads.co</a></li>
</ol>

<h3 id="setup">Setup</h3>
<p>Database: <a href="https://www.postgresql.org/">PostgreSQL</a><br />
Backend: <a href="https://www.python.org/">Python</a>, <a href="https://www.djangoproject.com/">Django</a><br />
API: <a href="https://www.django-rest-framework.org/">Django REST Framework</a><br />
Frontend: <a href="https://vuejs.org/">Vue.js</a><br />
Scraping: <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup</a>, <a href="https://docs.python-requests.org/en/latest/">requests</a>, <a href="https://selenium.dev/">selenium</a>
Proxy IP: <a href="https://www.webshare.io/">Webshare</a>
Queue: <a href="https://redis.io/">Redis</a> <br />
Worker: <a href="https://docs.celeryq.dev/">Celery</a></p>

<h3 id="data-collection">Data Collection</h3>
<p>Every midnnight, the sources mentioned above are scraped and the data is stored in the database.
To avoid being rate limited, the scraping is done with rotating proxy IP addresses. I have used <a href="https://www.webshare.io/">Webshare</a> for this purpose. It is a cheap option and I pay only $3/month for 100 rotating proxy IP addresses. It provides me with an API which I can use to rotate the IP addresses on each request.</p>
<ul>
  <li>Use of database triggers to scrape jobs:</li>
</ul>

<h3 id="periodic-jobs">Periodic Jobs</h3>
<p>I have used <a href="https://docs.celeryq.dev/">Celery</a> to run periodic jobs. I have a few periodic jobs that I run every day.</p>
<ul>
  <li>Scraping jobs from sources</li>
  <li>Cleaning up the database</li>
</ul>]]></content><author><name></name></author><category term="job-board" /><category term="scraping" /><category term="proxy-ip" /><category term="remote-jobs" /><summary type="html"><![CDATA[an example of a blog post with giscus comments]]></summary></entry><entry><title type="html">Creating a movie recommendation system</title><link href="http://localhost:4000/blog/2018/svd-for-recommendation/" rel="alternate" type="text/html" title="Creating a movie recommendation system" /><published>2018-01-04T16:59:00+01:00</published><updated>2018-01-04T16:59:00+01:00</updated><id>http://localhost:4000/blog/2018/svd-for-recommendation</id><content type="html" xml:base="http://localhost:4000/blog/2018/svd-for-recommendation/"><![CDATA[<p>In my undergraduate degree, I built a movie recommendation system using Singular Value Decomposition (SVD). It was the first time I got to see the power of machine learning in action, and the results really
surprised me in a good way.</p>

<p>I will go through the process used in the project, and the code for this is available in my <a href="https://github.com/dipespandey/movie-recommendation-system">Github</a>.</p>

<h3 id="data-collection">Data Collection</h3>
<p>One of the most famous movie data APIs, Open Movie Database (OMDB) was used to get the movie data. The data was then stored in a CSV file. The data consists of 10000 movies and their corresponding ratings from 1000 users. Let’s take a look at the structure of the data.</p>

<p>Let’s have a quick look at the data. While there are other files in the dataset, we will only be using the <code class="language-plaintext highlighter-rouge">u.data</code> file because it has all the ratings
information we need.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user_id item_id rating timestamp
196	242	3	881250949
186	302	3	891717742
22	377	1	878887116
244	51	2	880606923
166	346	1	886397596
</code></pre></div></div>

<h3 id="data-preprocessing">Data Preprocessing</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">mean_squared_error</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">random</span>


<span class="c1"># Load data from disk
</span><span class="k">def</span> <span class="nf">ratings_reader</span><span class="p">():</span>
   <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">user_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">rating</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">]</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">dataset/u.data</span><span class="sh">'</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="sh">'</span><span class="se">\t</span><span class="sh">'</span><span class="p">,</span> <span class="n">names</span><span class="o">=</span><span class="n">names</span><span class="p">)</span>
   <span class="n">n_users</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">user_id</span><span class="p">.</span><span class="nf">unique</span><span class="p">().</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
   <span class="n">n_items</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">item_id</span><span class="p">.</span><span class="nf">unique</span><span class="p">().</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

   <span class="c1"># Create r_{ui}, our ratings matrix
</span>   <span class="n">ratings</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="n">n_users</span><span class="p">,</span> <span class="n">n_items</span><span class="p">))</span>
   <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="nf">itertuples</span><span class="p">():</span>
       <span class="n">ratings</span><span class="p">[</span><span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>

   <span class="k">return</span> <span class="n">ratings</span>

<span class="n">ratings</span> <span class="o">=</span> <span class="nf">ratings_reader</span><span class="p">()</span>
<span class="n">n_users</span> <span class="o">=</span> <span class="n">ratings</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">n_items</span> <span class="o">=</span> <span class="n">ratings</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="test-train-split">Test-Train Split</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_train_split</span><span class="p">(</span><span class="n">ratings</span><span class="p">):</span>
   <span class="n">test</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">ratings</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
   <span class="n">train</span> <span class="o">=</span> <span class="n">ratings</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>

   <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">ratings</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
      <span class="n">test_ratings</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">ratings</span><span class="p">[</span><span class="n">user</span><span class="p">,</span> <span class="p">:].</span><span class="nf">nonzero</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span>
      <span class="n">size</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">replace</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

      <span class="n">train</span><span class="p">[</span><span class="n">user</span><span class="p">,</span> <span class="n">test_ratings</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="n">test</span><span class="p">[</span><span class="n">user</span><span class="p">,</span> <span class="n">test_ratings</span><span class="p">]</span> <span class="o">=</span> <span class="n">ratings</span><span class="p">[</span><span class="n">user</span><span class="p">,</span> <span class="n">test_ratings</span><span class="p">]</span>

   <span class="nf">assert</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">all</span><span class="p">((</span><span class="n">train</span> <span class="o">*</span> <span class="n">test</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span>

   <span class="k">return</span> <span class="n">train</span><span class="p">,</span> <span class="n">test</span>


<span class="n">train</span><span class="p">,</span> <span class="n">test</span> <span class="o">=</span> <span class="nf">test_train_split</span><span class="p">(</span><span class="n">ratings</span><span class="p">)</span>



<span class="k">def</span> <span class="nf">get_rmse</span><span class="p">(</span><span class="n">actual</span><span class="p">,</span> <span class="n">pred</span><span class="p">):</span>
   <span class="n">pred</span> <span class="o">=</span> <span class="n">pred</span><span class="p">[</span><span class="n">actual</span><span class="p">.</span><span class="nf">nonzero</span><span class="p">()].</span><span class="nf">flatten</span><span class="p">()</span>
   <span class="n">actual</span> <span class="o">=</span> <span class="n">actual</span><span class="p">[</span><span class="n">actual</span><span class="p">.</span><span class="nf">nonzero</span><span class="p">()].</span><span class="nf">flatten</span><span class="p">()</span>
   <span class="n">mse</span> <span class="o">=</span> <span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">actual</span><span class="p">)</span>
   <span class="k">return</span> <span class="n">mse</span><span class="o">**</span><span class="mf">0.5</span>
</code></pre></div></div>

<h3 id="training-the-model">Training the model</h3>
<h5 id="set-hyperparameters">Set hyperparameters</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n_iters</span> <span class="o">=</span> <span class="mi">200</span>
<span class="n">gamma</span> <span class="o">=</span> <span class="mf">0.001</span>
<span class="n">lmbda</span> <span class="o">=</span> <span class="mf">0.01</span>

<span class="n">k</span> <span class="o">=</span> <span class="mi">80</span>

<span class="n">users</span><span class="p">,</span> <span class="n">items</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">nonzero</span><span class="p">()</span>

<span class="n">Bu</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">n_users</span><span class="p">)</span>
<span class="n">Bi</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">n_items</span><span class="p">)</span>
<span class="n">P</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="n">n_users</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
<span class="n">Q</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="n">n_items</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
<span class="n">global_bias</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">train</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)])</span>
<span class="n">train_rmses</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">test_rmses</span> <span class="o">=</span> <span class="p">[]</span>
</code></pre></div></div>

<h5 id="matrix-factorization-algorithm-for-collaborative-filtering">Matrix Factorization Algorithm for Collaborative Filtering</h5>

<p>Before we start, let’s try to visualize how the algorithm works. The algorithm is called SVD (Singular Value Decomposition)-based Matrix Factorization. There’s a very intuitive video on youtube by <a href="https://www.youtube.com/@visualkernel">Visual Kernel</a> that explains the algorithm. Feel free to watch it.</p>

<iframe width="720" height="500" style="width: 100%;" src="https://www.youtube.com/embed/vSczTbgc8Rc">
</iframe>

<p>The following is a detailed breakdown of applying SVD to the given user-item matrix.<br />
Consider the following user-item matrix:</p>
<table class="table table-bordered">
<tr>
<td>User</td>
<td>Indiana Jones</td>
<td>Star Wars</td>
<td>Empire Strikes Back</td>
<td>Incredibles</td>
<td>Casablanca</td>
</tr>
<tr>
<td>Bob</td>
<td>4</td>
<td>5</td>
<td>?</td>
<td>?</td>
<td>?</td>
</tr>
<tr>
<td>Ted</td>
<td>?</td>
<td>?</td>
<td>?</td>
<td>?</td>
<td>1</td>
</tr>
<tr>
<td>Ann</td>
<td>?</td>
<td>5</td>
<td>5</td>
<td>5</td>
<td>?</td>
</tr>
</table>

<p>Step 1: Initialize the User-Item Matrix ( R )</p>
<ul>
  <li>Fill missing values with the average rating or zeros for simplicity:<br />
\(R = \begin{bmatrix}
4 &amp; 5 &amp; 0 &amp; 0 &amp; 0 \\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\
0 &amp; 5 &amp; 5 &amp; 5 &amp; 0
\end{bmatrix}\)</li>
</ul>

<p>Step 2: Apply SVD</p>
<ul>
  <li>Decompose \(R\) into three matrices \(U\), \(\Sigma\), and \(V^T\) such that \(R \approx U \Sigma V^T\).</li>
</ul>

<p>Example decomposition:</p>

\[U = \begin{bmatrix}
  0.58 &amp; 0.58 &amp; 0.58 \\
  0.29 &amp; -0.71 &amp; 0.65 \\
  0.76 &amp; -0.41 &amp; -0.50
  \end{bmatrix}\]

\[\Sigma = \begin{bmatrix}
  9 &amp; 0 &amp; 0 \\
  0 &amp; 5 &amp; 0 \\
  0 &amp; 0 &amp; 2
  \end{bmatrix}\]

\[V^T = \begin{bmatrix}
  0.58 &amp; 0.58 &amp; 0.58 &amp; 0.29 &amp; 0.29 \\
  0.29 &amp; -0.71 &amp; 0.65 &amp; 0.29 &amp; -0.29 \\
  0.76 &amp; -0.41 &amp; -0.50 &amp; 0.29 &amp; 0.29
  \end{bmatrix}\]

<p>Step 3: Reconstruct the Matrix</p>
<ul>
  <li>Use the top \(k\) singular values to approximate \(R\):
\(R' = U_k \Sigma_k V_k^T\)</li>
</ul>

<p>How does this work?</p>
<ul>
  <li>The matrix \(R\) is decomposed into three matrices: \(U\), \(\Sigma\), and \(V^T\).</li>
  <li>\(U\) contains the left singular vectors, \(\Sigma\) is a diagonal matrix with singular values, and \(V^T\) contains the right singular vectors.</li>
  <li>By selecting the top \(k\) singular values, we reduce the dimensionality of the matrices while retaining the most significant features.</li>
  <li>The product of these reduced matrices \(U_k \Sigma_k V_k^T\) gives us an approximation of the original matrix \(R\), denoted as \(R'\).</li>
  <li>This approximation helps in reconstructing the matrix with reduced noise and improved generalization for predicting missing values.</li>
</ul>

<p>Step 4: Predict Missing Ratings</p>
<ul>
  <li>Use the reconstructed matrix \(R'\) to fill in missing ratings:
\(R' = \begin{bmatrix}
4 &amp; 5 &amp; 3 &amp; 2 &amp; 1 \\
2 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\
3 &amp; 5 &amp; 5 &amp; 5 &amp; 2
\end{bmatrix}\)</li>
</ul>

<p>The predicted ratings for missing values are derived from the reconstructed matrix \(R'\).</p>

<p>Matrix Factorization is a collaborative filtering algorithm used to predict user-item interactions. The goal is to factorize the user-item interaction matrix into two lower-dimensional matrices, representing users and items, respectively. These matrices are then used to predict missing entries in the original matrix.</p>

<p>Mathematically, we aim to decompose the user-item interaction matrix \(R\) into two matrices \(P\) and \(Q\) such that:
\(R \approx P \cdot Q^T\)</p>

<p>where:</p>
<ul>
  <li>\(R\) is the \(n \times m\) user-item interaction matrix.</li>
  <li>\(P\) is the \(n \times k\) user-feature matrix.</li>
  <li>\(Q\) is the \(m \times k\) item-feature matrix.</li>
  <li>\(k\) is the number of latent features.</li>
</ul>

<p>The predicted rating \(\hat{r}_{ui}\) for user \(u\) and item \(i\) is given by:</p>

\[\hat{r}_{ui} = P_u \cdot Q_i^T + B_u + B_i + \mu\]

<p>where:</p>
<ul>
  <li>\(P_u\) is the \(u\)-th row of matrix \(P\)</li>
  <li>\(Q_i\) is the \(i\)-th row of matrix \(Q\)</li>
  <li>\(B_u\) is the bias term for user \(u\)</li>
  <li>\(B_i\) is the bias term for item \(i\)</li>
  <li>\(\mu\) is the global bias term, representing the average rating.</li>
</ul>

<p>To learn the matrices \(P\) and \(Q\), we minimize the following regularized squared error loss function using Stochastic Gradient Descent (SGD):</p>

\[\min_{P, Q, B_u, B_i} \sum_{(u,i) \in \mathcal{K}} \left( r_{ui} - \hat{r}_{ui} \right)^2 + \lambda \left( \|P_u\|^2 + \|Q_i\|^2 + B_u^2 + B_i^2 \right)\]

<p>where:</p>
<ul>
  <li>\(\mathcal{K}\) is the set of user-item pairs for which the ratings are known.</li>
  <li>\(\lambda\) is the regularization parameter to prevent overfitting.</li>
</ul>

<p>The update rules for SGD are as follows:</p>

<p>\(P_u \leftarrow P_u + \gamma \left( e_{ui} \cdot Q_i - \lambda \cdot P_u \right)\)<br />
\(Q_i \leftarrow Q_i + \gamma \left( e_{ui} \cdot P_u - \lambda \cdot Q_i \right)\)<br />
\(B_u \leftarrow B_u + \gamma \left( e_{ui} - \lambda \cdot B_u \right)\)<br />
\(B_i \leftarrow B_i + \gamma \left( e_{ui} - \lambda \cdot B_i \right)\)</p>

<p>where:</p>
<ul>
  <li>\(e_{ui} = r_{ui} - \hat{r}_{ui}\) is the prediction error.</li>
  <li>\(\gamma\) is the learning rate.</li>
</ul>

<p>By iteratively updating the matrices \(P\) and \(Q\), and the bias terms \(B_u\) and \(B_i\), we can minimize the loss function and obtain the optimal factorized matrices for predicting user-item interactions.</p>

<p>Now, let’s implement the algorithm.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">trainer</span><span class="p">(</span><span class="n">n_iters</span><span class="p">,</span> <span class="n">users</span><span class="p">,</span> <span class="n">items</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">,</span> <span class="n">Bu</span><span class="p">,</span> <span class="n">Bi</span><span class="p">,</span> <span class="n">global_bias</span><span class="p">,</span> <span class="n">trainer</span><span class="p">,</span> <span class="n">tester</span><span class="p">,</span> <span class="n">gamma</span><span class="p">,</span> <span class="n">lmbda</span><span class="p">):</span>
   <span class="c1"># use the stochastic gradient descent approach to mimimize the error in prediction
</span>   <span class="n">train_rmses</span> <span class="o">=</span> <span class="p">[]</span>
   <span class="n">test_rmses</span> <span class="o">=</span> <span class="p">[]</span>

   <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_iters</span><span class="p">):</span>
      <span class="k">for</span> <span class="n">u</span><span class="p">,</span><span class="n">i</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">users</span><span class="p">,</span> <span class="n">items</span><span class="p">):</span>
         <span class="n">prediction</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">u</span><span class="p">,:].</span><span class="nf">dot</span><span class="p">(</span><span class="n">Q</span><span class="p">[</span><span class="n">i</span><span class="p">,:].</span><span class="n">T</span><span class="p">)</span> <span class="o">+</span> <span class="n">Bu</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="n">Bi</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">global_bias</span>
         <span class="n">e</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="n">u</span><span class="p">,</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">prediction</span>
         <span class="n">Bu</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+=</span> <span class="n">gamma</span> <span class="o">*</span> <span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">lmbda</span> <span class="o">*</span> <span class="n">Bu</span><span class="p">[</span><span class="n">u</span><span class="p">])</span>
         <span class="n">Bi</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">gamma</span> <span class="o">*</span> <span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">lmbda</span> <span class="o">*</span> <span class="n">Bi</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
         <span class="n">P</span><span class="p">[</span><span class="n">u</span><span class="p">,:]</span> <span class="o">+=</span> <span class="n">gamma</span> <span class="o">*</span> <span class="p">(</span><span class="n">e</span> <span class="o">*</span> <span class="n">Q</span><span class="p">[</span><span class="n">i</span><span class="p">,:]</span> <span class="o">-</span> <span class="n">lmbda</span> <span class="o">*</span> <span class="n">P</span><span class="p">[</span><span class="n">u</span><span class="p">,:])</span>
         <span class="n">Q</span><span class="p">[</span><span class="n">i</span><span class="p">,:]</span> <span class="o">+=</span> <span class="n">gamma</span> <span class="o">*</span> <span class="p">(</span><span class="n">e</span> <span class="o">*</span> <span class="n">P</span><span class="p">[</span><span class="n">u</span><span class="p">,:]</span> <span class="o">-</span> <span class="n">lmbda</span> <span class="o">*</span> <span class="n">Q</span><span class="p">[</span><span class="n">i</span><span class="p">,:])</span>
      
      <span class="n">pred</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="n">P</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">Q</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>

      <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">P</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
         <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
            <span class="n">pred</span><span class="p">[</span><span class="n">u</span><span class="p">,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">u</span><span class="p">,:].</span><span class="nf">dot</span><span class="p">(</span><span class="n">Q</span><span class="p">[</span><span class="n">i</span><span class="p">,:].</span><span class="n">T</span><span class="p">)</span> <span class="o">+</span> <span class="n">Bu</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="n">Bi</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">global_bias</span>

      <span class="n">train_rmse</span> <span class="o">=</span> <span class="nf">get_rmse</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">pred</span><span class="p">)</span>
      <span class="n">test_rmse</span> <span class="o">=</span> <span class="nf">get_rmse</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">pred</span><span class="p">)</span>
      <span class="n">train_rmses</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">train_rmse</span><span class="p">)</span>
      <span class="n">test_rmses</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">test_rmse</span><span class="p">)</span>
      <span class="nf">print</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">train_rmse</span><span class="p">,</span> <span class="n">test_rmse</span><span class="p">)</span>
      <span class="nf">return</span><span class="p">(</span><span class="n">train_rmses</span><span class="p">,</span> <span class="n">test_rmses</span><span class="p">)</span>


<span class="c1"># Start training the model
</span><span class="n">train_rmses</span><span class="p">,</span> <span class="n">test_rmses</span> <span class="o">=</span> <span class="nf">trainer</span><span class="p">(</span><span class="n">n_iters</span><span class="p">,</span> <span class="n">users</span><span class="p">,</span> <span class="n">items</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">,</span> <span class="n">Bu</span><span class="p">,</span> <span class="n">Bi</span><span class="p">,</span> <span class="n">global_bias</span><span class="p">,</span> <span class="n">train</span><span class="p">,</span> <span class="n">test</span><span class="p">,</span> <span class="n">gamma</span><span class="p">,</span> <span class="n">lmbda</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="plotting-the-learning-curves">Plotting the learning curves</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">draw_learning_curve</span><span class="p">(</span><span class="n">n_iters</span><span class="p">,</span> <span class="n">train_rmse</span><span class="p">,</span> <span class="n">test_rmse</span><span class="p">):</span>
   <span class="c1"># use this function to use the above train_rmses and test_rmses to plot the rmse curves, 
</span>   <span class="c1"># see how they converge
</span>   <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">n_iters</span><span class="p">),</span> <span class="n">train_rmse</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Train</span><span class="sh">'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>
   <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">n_iters</span><span class="p">),</span> <span class="n">test_rmse</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Test</span><span class="sh">'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>
   <span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Iterations</span><span class="sh">'</span><span class="p">)</span>
   <span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">RMSE</span><span class="sh">'</span><span class="p">)</span>
   <span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">best</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">cosine_similarity</span><span class="p">(</span><span class="n">Q</span><span class="p">):</span>
   <span class="c1"># finds the cosine similarity based on item feature matrix
</span>   <span class="c1"># parameter: Q ( item latent feature matrix)
</span>   <span class="n">sim</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>
   <span class="n">norms</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">diagonal</span><span class="p">(</span><span class="n">sim</span><span class="p">))])</span>
   <span class="k">return</span> <span class="n">sim</span><span class="o">/</span> <span class="n">norms</span><span class="o">/</span> <span class="n">norms</span><span class="p">.</span><span class="n">T</span>


<span class="k">def</span> <span class="nf">get_top_k</span><span class="p">(</span><span class="n">sims</span><span class="p">,</span> <span class="n">movie_id</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
   <span class="c1"># return the tuple of top k movies using the similarity matrix and movie_id
</span>   <span class="n">movie_indices</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argsort</span><span class="p">(</span><span class="n">sims</span><span class="p">[</span><span class="n">movie_id</span><span class="p">,:])[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
   <span class="n">top_k</span> <span class="o">=</span> <span class="n">movie_indices</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">k</span><span class="p">]</span>   
   <span class="n">top_k</span> <span class="o">=</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">top_k</span><span class="p">)</span>
   <span class="k">return</span> <span class="n">top_k</span>
</code></pre></div></div>

<h3 id="inference">Inference</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">infer</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">item_id</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">,</span> <span class="n">Bu</span><span class="p">,</span> <span class="n">Bi</span><span class="p">,</span> <span class="n">global_bias</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Make a prediction for a given user and item using the trained matrices.
    
    Parameters:
    user_id (int): The ID of the user.
    item_id (int): The ID of the item.
    P (numpy array): User latent feature matrix.
    Q (numpy array): Item latent feature matrix.
    Bu (numpy array): User biases.
    Bi (numpy array): Item biases.
    global_bias (float): The global bias.
    
    Returns:
    float: The predicted rating.
    </span><span class="sh">"""</span>
    <span class="n">prediction</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">user_id</span><span class="p">,</span> <span class="p">:].</span><span class="nf">dot</span><span class="p">(</span><span class="n">Q</span><span class="p">[</span><span class="n">item_id</span><span class="p">,</span> <span class="p">:].</span><span class="n">T</span><span class="p">)</span> <span class="o">+</span> <span class="n">Bu</span><span class="p">[</span><span class="n">user_id</span><span class="p">]</span> <span class="o">+</span> <span class="n">Bi</span><span class="p">[</span><span class="n">item_id</span><span class="p">]</span> <span class="o">+</span> <span class="n">global_bias</span>
    <span class="k">return</span> <span class="n">prediction</span>

<span class="c1"># Example usage:
</span><span class="n">user_id</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># example user ID
</span><span class="n">item_id</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># example item ID
</span><span class="n">predicted_rating</span> <span class="o">=</span> <span class="nf">infer</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">item_id</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">,</span> <span class="n">Bu</span><span class="p">,</span> <span class="n">Bi</span><span class="p">,</span> <span class="n">global_bias</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Predicted rating for user </span><span class="si">{</span><span class="n">user_id</span><span class="si">}</span><span class="s"> and item </span><span class="si">{</span><span class="n">item_id</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">predicted_rating</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>The fullstack project with the code is available <a href="https://github.com/Genalize/movieRecommendations">here</a>.</p>

<p>References:</p>
<ul>
  <li>https://www.ethanrosenthal.com/2016/01/09/explicit-matrix-factorization-sgd-als/</li>
  <li>https://www.youtube.com/watch?v=vSczTbgc8Rc</li>
</ul>]]></content><author><name></name></author><category term="recommendation" /><category term="machine-learning" /><category term="svd" /><category term="python" /><summary type="html"><![CDATA[In my undergraduate degree, I built a movie recommendation system using Singular Value Decomposition (SVD). It was the first time I got to see the power of machine learning in action, and the results really surprised me in a good way.]]></summary></entry></feed>